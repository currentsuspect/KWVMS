    rules_version = '2';
    service cloud.firestore {
      match /databases/{database}/documents {

        // Rules for users collection
        match /users/{userId} {
          // Allow users to read their own document OR admins to read any user document
          allow read: if request.auth != null && 
                       (request.auth.uid == userId || 
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
                        
          // Allow users to create their own document (registration)
          allow create: if request.auth != null && request.auth.uid == userId;
          // Allow vendors OR admins to update specific fields in user documents
          allow update: if request.auth != null && 
                       // Allow user to update their own doc if vendor (specific fields)
                       ( (request.auth.uid == userId && 
                          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'vendor' &&
                          (
                            // Allow updating just location fields
                            (request.resource.data.diff(resource.data).affectedKeys()
                              .hasAny(['location', 'lastLocationUpdate']) && 
                             request.resource.data.diff(resource.data).affectedKeys()
                              .hasOnly(['location', 'lastLocationUpdate'])) ||
                            // Allow updating status and radius
                            request.resource.data.diff(resource.data).affectedKeys()
                              .hasOnly(['status', 'radius', 'lastUpdated'])
                          )
                         )
                         ||
                         // Allow admin to update specific fields (e.g., role, status - add more as needed)
                         ( get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' &&
                           request.resource.data.diff(resource.data).affectedKeys()
                             .hasOnly(['role', 'status', 'accountSuspended']) // Example fields admin can change
                         ) 
                       );
                       
          // Consider delete rules later if needed (e.g., admin deletion)
          // allow delete: if ...;
        }

        // Rules for orders collection
        match /orders/{orderId} {
          // Allow users to create their own orders
          allow create: if request.auth != null && 
                       request.resource.data.userId == request.auth.uid;
          // Allow users to read their own orders, OR vendors/admins to read any order
          allow read: if request.auth != null && 
                       (resource.data.userId == request.auth.uid || 
                        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['vendor', 'admin'])); // Already allowed admin read
                       
          // Allow specific updates based on role and order status
          allow update: if request.auth != null && 
                       (
                         // Vendor accepts a PENDING order
                         (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'vendor' &&
                          resource.data.status == 'pending' && // <<< Check current status is pending
                          request.resource.data.diff(resource.data).affectedKeys()
                            .hasOnly(['status', 'assignedVendorId', 'assignedAt']) && // Fields for accepting
                          request.resource.data.status == 'assigned' && // Ensure status is being set to 'assigned'
                          request.resource.data.assignedVendorId == request.auth.uid) || // Ensure vendor assigns themselves

                         // Vendor updates an ASSIGNED or IN_PROGRESS order (e.g., mark in progress/completed)
                         (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'vendor' &&
                          resource.data.assignedVendorId == request.auth.uid && // Can only update THEIR assigned orders
                          resource.data.status in ['assigned', 'in_progress'] && // Check current status
                          request.resource.data.diff(resource.data).affectedKeys()
                            .hasOnly(['status', 
                                      'in_progressTimestamp', 'completedTimestamp',
                                      'startedDeliveryAt', 'completedAt',
                                      'estimatedDeliveryTime', 'actualDeliveryTime']) && // Fields for status changes
                          request.resource.data.status in ['in_progress', 'completed']) || // Ensure status is valid
                            
                         // User cancels a PENDING order (future use example)
                         (resource.data.userId == request.auth.uid && 
                          resource.data.status == 'pending' && // Can only cancel pending orders
                          request.resource.data.diff(resource.data).affectedKeys()
                            .hasOnly(['status']) &&
                          request.resource.data.status == 'cancelled') || // Example: Allow user to set status to 'cancelled'
                          
                         // Admin can update any order (for testing and management)
                         (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin')
                       );
        }

        // Rules for a specific settings document
        match /settings/main {
           // Allow only admins to read and write the main settings document
           allow read, write: if request.auth != null && 
                               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        }

        // Add rules for other collections (e.g., orders) later --> Should be 'orders' rules above

      }
    }