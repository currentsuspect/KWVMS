    rules_version = '2';
    service cloud.firestore {

      match /databases/{database}/documents {

        // Helper function to check if the requesting user is an admin
        function isAdmin() {
          // Check the requesting user's role from their Firestore document
          return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                 get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        }

        // Rules for users collection
        match /users/{userId} {
          // Allow users to read their own data
          // Allow admins to read any user data
          // Allow any authenticated user to read vendor profiles for the 'Available Vendors' list.
          allow get: if request.auth != null && 
                        (request.auth.uid == userId || // User reads own profile
                         isAdmin() ||                  // Admin reads any profile
                         resource.data.role == 'vendor'); // Any authenticated user reads vendor profile
          // Allow any authenticated user to LIST the users collection.
          // Firestore will implicitly filter results based on the 'get' rule above.
          // This allows the query for available vendors to work.
          allow list: if request.auth != null;
          // Allow users to create their own account data
          allow create: if request.auth != null && request.auth.uid == userId;
          // Allow users to update their own data 
          allow update: if request.auth != null && request.auth.uid == userId &&
                         (
                           // Allow vendors updating location, status, radius
                           (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
                            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'vendor' && (
                             request.resource.data.diff(resource.data).affectedKeys()
                               .hasAny(['location', 'lastLocationUpdate']) || // Use hasAny for more flexibility if needed later
                             request.resource.data.diff(resource.data).affectedKeys()
                               .hasOnly(['status', 'radius', 'lastUpdated'])
                           )) ||
                           // Allow vendors updating their earnings after completing an order
                           (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
                            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'vendor' && 
                            request.resource.data.diff(resource.data).affectedKeys()
                             .hasOnly(['completedOrders', 'totalEarnings'])) // Corrected field names
                           // Add rules here later if non-vendors need to update other specific fields
                         );
        }

        // Rules for orders collection
        match /orders/{orderId} {
          // Allow users to create their own orders
          allow create: if request.auth != null && 
                       request.resource.data.userId == request.auth.uid;
          // Allow users to read their own orders, and vendors/admins to read any order
          allow read: if request.auth != null && 
                     (resource.data.userId == request.auth.uid || 
                      (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['vendor', 'admin'])); // Allow admins too
                       
          // Very permissive update rule for testing
          allow update: if request.auth != null && 
                        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'vendor' ||
                         resource.data.userId == request.auth.uid || 
                         isAdmin());
        }

        // Rules for messages collection
        match /messages/{messageId} {
          allow read: if request.auth != null && (
            // User can read messages for their orders
            exists(/databases/$(database)/documents/orders/$(resource.data.orderId)) &&
            get(/databases/$(database)/documents/orders/$(resource.data.orderId)).data.userId == request.auth.uid ||
            // Vendor can read messages for orders assigned to them OR pending orders
            exists(/databases/$(database)/documents/orders/$(resource.data.orderId)) &&
            (get(/databases/$(database)/documents/orders/$(resource.data.orderId)).data.assignedVendorId == request.auth.uid ||
             (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'vendor' &&
              get(/databases/$(database)/documents/orders/$(resource.data.orderId)).data.status == 'pending')) ||
            // Admin can read all messages
            isAdmin()
          );
          
          allow create: if request.auth != null && (
            // User can create messages for their orders
            exists(/databases/$(database)/documents/orders/$(request.resource.data.orderId)) &&
            get(/databases/$(database)/documents/orders/$(request.resource.data.orderId)).data.userId == request.auth.uid ||
            // Vendor can create messages for orders assigned to them OR pending orders
            exists(/databases/$(database)/documents/orders/$(request.resource.data.orderId)) &&
            (get(/databases/$(database)/documents/orders/$(request.resource.data.orderId)).data.assignedVendorId == request.auth.uid ||
             (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'vendor' &&
              get(/databases/$(database)/documents/orders/$(request.resource.data.orderId)).data.status == 'pending')) ||
            // Admin can create messages
            isAdmin()
          ) && 
          // Ensure sender ID matches the authenticated user
          request.resource.data.senderId == request.auth.uid &&
          // Ensure required fields exist and are of correct type
          request.resource.data.keys().hasAll(['orderId', 'senderId', 'text', 'timestamp']) &&
          request.resource.data.orderId is string &&
          request.resource.data.senderId is string &&
          request.resource.data.text is string &&
          request.resource.data.text.size() > 0;
        }

        // Rules for the main settings document used by admin and vendors
        match /settings/main {
           // Allow any authenticated user (especially vendors) to read settings
           allow read: if request.auth != null;
           // Allow only admins to write settings
           allow write: if request.auth != null && isAdmin(); 
        }

        // Add rules for other collections (e.g., orders) later

      }
    }